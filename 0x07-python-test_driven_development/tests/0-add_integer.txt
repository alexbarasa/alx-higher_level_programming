==========================
How to use 0-add_integer.py
==========================

Import function from module
----------------------------

>>> add_integer = __import__('0-add_integer').add_integer

Using add_integer
-------------------

# Test case 1: Adding two integers
>>> add_integer(2, 3)
5

# Test case 2: Adding an integer and a float
>>> add_integer(2.5, 3)
5

# Test case 3: Adding a float and an integer
>>> add_integer(2, 3.5)
5

# Test case 4: Adding two floats
>>> add_integer(2.5, 3.5)
5

# Test case 5: Adding zero with default value
>>> add_integer(0)
98

# Test case 6: Adding a negative integer and a positive integer
>>> add_integer(-5, 10)
5

# Test case 7: Adding two negative integers
>>> add_integer(-2, -3)
-5

# Test case 8: Adding two large integers
>>> add_integer(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000098

# Test case 9: Passing incorrect types
>>> add_integer("2", 3)
Traceback (most recent call last):
    ...
TypeError: a must be an integer

Edge cases:
----------------

>>> add_integer()
Traceback (most recent call last):
TypeError: add_integer() missing 1 required positional argument: 'a'

>>> add_integer("unicorn")
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer(5, None)
Traceback (most recent call last):
TypeError: b must be an integer

>>> add_integer(34, 54, 67)
Traceback (most recent call last):
TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given

The result can't be a float
>>> add_integer(2.5, 3.7)
5

The result can't be a float
>>> add_integer(3.7)
101

>>> add_integer([1, 2, 3])
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer((1, 2, 3))
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer({"a": 1, "b": 2, "c": 3})
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer(None)
Traceback (most recent call last):
TypeError: a must be an integer

exception OverflowError - Raised when the result of an arithmetic operation is too large to 
be represented.

>>> add_integer(float('-inf'), float('inf'))
Traceback (most recent call last):
OverflowError: cannot convert float infinity to integer

>>> add_integer(100e1000, 1)
Traceback (most recent call last):
OverflowError: cannot convert float infinity to integer

>>> add_integer(float('inf'))
Traceback (most recent call last):
OverflowError: cannot convert float infinity to integer


>>> add_integer(float('nan'), 0)
Traceback (most recent call last):
ValueError: cannot convert float NaN to integer
